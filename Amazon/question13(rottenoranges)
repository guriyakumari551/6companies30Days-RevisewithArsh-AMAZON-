class Solution {
public:
    int orangesRotting(vector<vector<int>>& grid)
    {
        


        //we can use the bfs traversal to find the minimum count
        int n=grid.size();
        int m=grid[0].size();
        int counttwo=0,countone=0;
        queue<pair<int,int>>pq;
        for(int i=0;i<n;i++)
        {
            for(int j=0;j<m;j++)
            {
                if(grid[i][j]==1)
                    countone++;
                if(grid[i][j]==2)
                    counttwo++;
                if(grid[i][j]==2)
                pq.push({i,j});
            }
        }
        int totalcount=countone+counttwo;
        int currcount=0;
        int time=0;
        while(!pq.empty())
        {
            int x=pq.size();
          currcount+=x;  
            
            if(currcount==totalcount)
            {
               
                break;
                
            }
            
            time++;
           
            for(int i=0;i<x;i++)
            {
                auto it=pq.front();
                pq.pop();
                int dx[4]={0,0,1,-1};
                int dy[4]={1,-1,0,0};
                for(int j=0;j<4;j++)
                {
                    int new_x=it.first+dx[j];
                    int new_y=it.second+dy[j];
                    if(new_x>=0&&new_x<n&&new_y>=0&&new_y<m&&grid[new_x][new_y]==1)
                    {
                        pq.push({new_x,new_y});
                        grid[new_x][new_y]=2;
                    }
                }
            }
        }
        if(currcount==totalcount)
            return time;
        else
            return -1;
        
    }
};