// { Driver Code Starts
// Initial template for C++

#include <bits/stdc++.h>
using namespace std;

 // } Driver Code Ends
// User function Template for C++

class Solution {
  public:
    int maxProfit(int k, int n, int arr[])
    {
        //this is a question of dynamic programming
     vector<vector<int>>dp(k+1,vector<int>(n,0));
     for(int i=0;i<n;i++)
     dp[0][i]=0;
     for(int i=0;i<=k;i++)
     dp[i][0]=0;
     for(int i=1;i<=k;i++)
     {
         //for any jwe have to just taking the maximum of i-1 to j-1; 
         for(int j=1;j<n;j++)
         {
             int currindex=j-1;
             int ans=dp[i][j-1];
             while(currindex>=0)
             {
                ans=max(ans,dp[i-1][currindex]+arr[j]-arr[currindex]);
                 currindex--;
                 
             }
             dp[i][j]=ans;
            
             
         }
     }
     return dp[k][n-1];
        
    }
};

// { Driver Code Starts.
int main() {
    int t;
    cin >> t;
    while (t--) {
        int N, K;
        cin >> K;
        cin >> N;
        int A[N];
        for (int i = 0; i < N; i++) cin >> A[i];

        Solution ob;
        cout << ob.maxProfit(K, N, A) << endl;
    }
    return 0;
}  // } Driver Code Ends